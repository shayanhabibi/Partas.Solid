import { splitProps, mergeProps } from "solid-js";
import { cva } from "class-variance-authority";
import { twMerge } from "tailwind-merge";
import { clsx } from "clsx";

export function SimpleCombination(props) {
    props = mergeProps({
        class: "ClassDefault",
    }, props);
    const [PARTAS_LOCAL, PARTAS_OTHERS] = splitProps(props, ["class"]);
    return <div>
        Some text
        <span class={PARTAS_LOCAL.class}>
            More text
        </span>
        <div {...PARTAS_OTHERS} bool:n$={false}>
            All but class have been spread into this tag!
        </div>
    </div>;
}

export const button_variants = (() => {
    const orig = "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0";
    return cva(orig, {
        defaultVariants: {
            size: "default",
            variant: "default",
        },
        variants: {
            size: {
                default: "h-9 px-4 py-2",
                icon: "h-9 w-9",
                lg: "h-10 rounded-md px-8",
                sm: "h-8 rounded-md px-3 text-xs",
            },
            variant: {
                default: "bg-primary text-primary-foreground shadow-sm hover:bg-primary/90",
                destructive: "bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
                outline: "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
                secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
            },
        },
    });
})();

export function Button(props) {
    const [PARTAS_LOCAL, PARTAS_OTHERS] = splitProps(props, ["size", "variant"]);
    return <button class={button_variants({
            size: PARTAS_LOCAL.size,
            variant: PARTAS_LOCAL.variant,
        })}
        {...PARTAS_OTHERS} bool:n$={false} />;
}

export function AccordionItem(props) {
    const [PARTAS_LOCAL, PARTAS_OTHERS] = splitProps(props, ["class"]);
    return <button class={twMerge(clsx(["border-b", PARTAS_LOCAL.class]))}
        {...PARTAS_OTHERS} bool:n$={false} />;
}
